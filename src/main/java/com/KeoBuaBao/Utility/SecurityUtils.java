package com.KeoBuaBao.Utility;

import javax.xml.bind.DatatypeConverter;
import java.security.MessageDigest;

/**
 * An utility for security purposes
 * @author Than Doan Thuan
 * @author Vuong Kha Sieu
 * @author Doan Duc Nguyen Long
 * @author Nguyen Van Trang
 */
public class SecurityUtils {
    /**
     * In reality, we should not store password as plain text. Therefore, using this method to hash the password with
     * SHA-256 cryptography algorithm
     * @param password the plain text password to be hashed
     * @return the hashed version of the plain text password
     */
    public static String hashPassword(String password) {
        String hashed = null;
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            messageDigest.update(password.getBytes());
            byte[] digestBytes = messageDigest.digest();
            hashed = DatatypeConverter.printHexBinary(digestBytes).toLowerCase();
        }
        catch(Exception e) {
            e.printStackTrace();
        }

        return hashed;
    }

    /**
     * Generate an authenticated token to verify the user's attempt. Token is generated by concatenating username,
     * hashed password, and current date time. Then, hash the concatenated string.
     * @param username the username of the user
     * @param hashedPassword the hashed version of the password
     * @param dateTime the current date time (represented as long data type)
     * @return the hashed token for the users to call function
     */
    public static String generateToken(String username, String hashedPassword, Long dateTime) {
        String code = username + hashedPassword + dateTime; // Concatenation
        return SecurityUtils.hashPassword(code); // Hash the concatenated string by SHA-256.
    }
}
